"use client";

import React, { useEffect, useState, useRef, useCallback } from 'react';
import { useAuth } from '../../context/AuthContext';
import { useRouter } from 'next/navigation';
import { useToken } from '@/app/hooks/useToken';
import { FaPlus, FaEdit, FaTrash, FaStore, FaUser, FaLock, FaBuilding, FaEye, FaEyeSlash, FaMapMarkerAlt } from 'react-icons/fa';
import { getStores, assignUserToStore, removeUserFromStore, getMyProfile, updateStoreProfile, changePassword, updateUserProfile, StoreUpdateData, PasswordChangeData, UserProfileInfo, StoreProfileInfo, UserUpdateData, getStoreAddresses, createStoreAddress, updateStoreAddress, deleteStoreAddress, setDefaultStoreAddress, StoreAddress, CreateStoreAddressRequest } from '@/services/api';

interface User {
  userId: string;
  username: string;
  fullName?: string;
  name?: string;
  surname?: string;
  email: string;
  isActive: boolean;
  userType: {
    id: number;
    name: string;
    description: string;
  } | string;
  Store?: {
    store_id: string;
    kurum_adi: string;
  }
}

interface UserFormData {
  username: string;
  password?: string;
  name: string;
  surname: string;
  email: string;
  phoneNumber?: string;
  adres?: string;                     // ðŸ†• KullanÄ±cÄ± adres alanÄ±
  userTypeName: string;
  storeId?: string;
}

export default function Settings() {
  const { user, isAdmin, isAdminOrEditor, isLoading: authLoading } = useAuth();
  const token = useToken();
  const router = useRouter();
  
  // Admin iÃ§in mevcut state'ler
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [deleteModalOpen, setDeleteModalOpen] = useState(false);
  const [deleteUserId, setDeleteUserId] = useState<string | null>(null);
  const [formData, setFormData] = useState<UserFormData>({
    username: '',
    password: '',
    name: '',
    surname: '',
    email: '',
    phoneNumber: '',
    adres: '',
    userTypeName: 'viewer',
    storeId: ''
  });
  const [assignStoreModalOpen, setAssignStoreModalOpen] = useState(false);
  const [assigningUserId, setAssigningUserId] = useState<string | null>(null);
  const [selectedStoreId, setSelectedStoreId] = useState<string>('');
  const [stores, setStores] = useState<{store_id: string, kurum_adi: string}[]>([]);
  const [assignLoading, setAssignLoading] = useState(false);
  const [removeLoading, setRemoveLoading] = useState(false);
  
  // Custom dropdown state'leri
  const [userTypeDropdownOpen, setUserTypeDropdownOpen] = useState(false);
  const [storeDropdownOpen, setStoreDropdownOpen] = useState(false);
  const [assignStoreDropdownOpen, setAssignStoreDropdownOpen] = useState(false);
  
  // Normal kullanÄ±cÄ± iÃ§in yeni state'ler
  const [activeTab, setActiveTab] = useState<'profile' | 'store' | 'address' | 'password'>('profile');
  const [userProfile, setUserProfile] = useState<UserProfileInfo | null>(null);
  const [storeProfile, setStoreProfile] = useState<StoreProfileInfo | null>(null);
  const [profileLoading, setProfileLoading] = useState(false);
  
  // Adres yÃ¶netimi state'leri
  const [addresses, setAddresses] = useState<StoreAddress[]>([]);
  const [addressesLoading, setAddressesLoading] = useState(false);
  const [showAddressModal, setShowAddressModal] = useState(false);
  const [editingAddress, setEditingAddress] = useState<StoreAddress | null>(null);
  const [newAddress, setNewAddress] = useState<CreateStoreAddressRequest>({
    title: '',
    address: '',
    city: '',
    district: '',
    postal_code: '',
    is_default: false
  });
  const [addingAddress, setAddingAddress] = useState(false);

  // Åžifre deÄŸiÅŸtirme form state'leri
  const [passwordForm, setPasswordForm] = useState<PasswordChangeData>({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [passwordLoading, setPasswordLoading] = useState(false);
  const [passwordMessage, setPasswordMessage] = useState('');
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  
  // KullanÄ±cÄ± profil gÃ¼ncelleme form state'leri
  const [userForm, setUserForm] = useState<UserUpdateData>({
    name: '',
    surname: '',
    phoneNumber: '',
    adres: ''
  });
  const [userLoading, setUserLoading] = useState(false);
  const [userMessage, setUserMessage] = useState('');
  
  // MaÄŸaza gÃ¼ncelleme form state'leri
  const [storeForm, setStoreForm] = useState<StoreUpdateData>({
    kurum_adi: '',
    vergi_numarasi: '',
    vergi_dairesi: '',
    yetkili_adi: '',
    yetkili_soyadi: '',
    telefon: '',
    eposta: '',
    faks_numarasi: '',
    tckn: ''
  });
  const [storeLoading, setStoreLoading] = useState(false);
  const [storeMessage, setStoreMessage] = useState('');
  
  // API Ã§aÄŸrÄ±sÄ±nÄ± takip etmek iÃ§in ref oluÅŸtur
  const fetchedRef = useRef(false);

  useEffect(() => {
    // Auth yÃ¼klemesi tamamlanmadÄ±ysa bekle
    if (authLoading) return;
    
    // Admin veya EditÃ¶r kullanÄ±cÄ±lar iÃ§in mevcut logic
    if (isAdminOrEditor) {
      // Sadece bir kez Ã§aÄŸrÄ±lmasÄ±nÄ± saÄŸla
      if (!fetchedRef.current) {
        fetchedRef.current = true;
        fetchUsers();
        fetchStores();
      }
    } else {
      // Normal kullanÄ±cÄ±lar iÃ§in profil bilgilerini getir
      fetchUserProfile();
    }
  }, [isAdminOrEditor, authLoading, router]);

  // Dropdown'larÄ±n dÄ±ÅŸÄ±na tÄ±klandÄ±ÄŸÄ±nda kapanmasÄ±
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element;
      if (!target.closest('.dropdown-container')) {
        setUserTypeDropdownOpen(false);
        setStoreDropdownOpen(false);
        setAssignStoreDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Auth yÃ¼klenirken loading gÃ¶ster
  if (authLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  // Normal kullanÄ±cÄ± profil bilgilerini getir
  const fetchUserProfile = async () => {
    setProfileLoading(true);
    try {
      const profileData = await getMyProfile();
      setUserProfile(profileData.user);
      setStoreProfile(profileData.store);
      
      // KullanÄ±cÄ± form'unu doldur
      if (profileData.user) {
        setUserForm({
          name: profileData.user.name || '',
          surname: profileData.user.surname || '',
          phoneNumber: profileData.user.phoneNumber || '',
          adres: '' // ArtÄ±k kullanÄ±lmÄ±yor - maÄŸaza bazlÄ± sistem
        });
      }
      
      // MaÄŸaza form'unu doldur
      if (profileData.store) {
        setStoreForm({
          kurum_adi: profileData.store.kurum_adi || '',
          vergi_numarasi: profileData.store.vergi_numarasi || '',
          vergi_dairesi: profileData.store.vergi_dairesi || '',
          yetkili_adi: profileData.store.yetkili_adi || '',
          yetkili_soyadi: profileData.store.yetkili_soyadi || '',
          telefon: profileData.store.telefon || '',
          eposta: profileData.store.eposta || '',
          faks_numarasi: profileData.store.faks_numarasi || '',
          tckn: profileData.store.tckn || ''
        });
      }
    } catch (err: any) {
      setError(err.message || "Profil bilgileri yÃ¼klenirken bir hata oluÅŸtu");
    } finally {
      setProfileLoading(false);
    }
  };

  // Adres yÃ¶netimi fonksiyonlarÄ±
  const fetchAddresses = async () => {
    try {
      setAddressesLoading(true);
      const response = await getStoreAddresses();
      if (response.success) {
        setAddresses(response.data);
      }
    } catch (error) {
      console.error('Adresler getirilemedi:', error);
    } finally {
      setAddressesLoading(false);
    }
  };

  const handleAddressSubmit = async () => {
    if (!newAddress.title || !newAddress.address) {
      alert('LÃ¼tfen adres baÅŸlÄ±ÄŸÄ± ve tam adres bilgilerini giriniz.');
      return;
    }

    try {
      setAddingAddress(true);
      if (editingAddress) {
        // GÃ¼ncelleme modu
        await updateStoreAddress(editingAddress.id, newAddress);
        alert('Adres baÅŸarÄ±yla gÃ¼ncellendi!');
      } else {
        // Yeni adres ekleme modu
        await createStoreAddress(newAddress);
        alert('Yeni adres baÅŸarÄ±yla eklendi!');
      }
      
      setShowAddressModal(false);
      setEditingAddress(null);
      setNewAddress({
        title: '',
        address: '',
        city: '',
        district: '',
        postal_code: '',
        is_default: false
      });
      await fetchAddresses();
    } catch (error: any) {
      alert(error.message || 'Adres iÅŸlemi sÄ±rasÄ±nda bir hata oluÅŸtu.');
    } finally {
      setAddingAddress(false);
    }
  };

  const handleEditAddress = (address: StoreAddress) => {
    setEditingAddress(address);
    setNewAddress({
      title: address.title,
      address: address.address,
      city: address.city,
      district: address.district,
      postal_code: address.postal_code,
      is_default: address.is_default
    });
    setShowAddressModal(true);
  };

  const handleDeleteAddress = async (addressId: string) => {
    if (confirm('Bu adresi silmek istediÄŸinizden emin misiniz?')) {
      try {
        await deleteStoreAddress(addressId);
        alert('Adres baÅŸarÄ±yla silindi!');
        await fetchAddresses();
      } catch (error: any) {
        alert(error.message || 'Adres silinemedi.');
      }
    }
  };

  const handleSetDefaultAddress = async (addressId: string) => {
    try {
      await setDefaultStoreAddress(addressId);
      alert('VarsayÄ±lan adres deÄŸiÅŸtirildi!');
      await fetchAddresses();
    } catch (error: any) {
      alert(error.message || 'VarsayÄ±lan adres ayarlanamadÄ±.');
    }
  };

  const openCreateModal = () => {
    setEditingAddress(null);
    setNewAddress({
      title: '',
      address: '',
      city: '',
      district: '',
      postal_code: '',
      is_default: false
    });
    setShowAddressModal(true);
  };

  // Åžifre deÄŸiÅŸtirme form handler'Ä±
  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setPasswordForm(prev => ({ ...prev, [name]: value }));
    setPasswordMessage(''); // MesajÄ± temizle
  };

  // Åžifre deÄŸiÅŸtirme submit
  const handlePasswordSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setPasswordMessage('');

    // Frontend validasyonu
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      setPasswordMessage('Yeni ÅŸifre ve onay ÅŸifresi eÅŸleÅŸmiyor');
      return;
    }

    if (passwordForm.newPassword.length < 6) {
      setPasswordMessage('Yeni ÅŸifre en az 6 karakter olmalÄ±dÄ±r');
      return;
    }

    setPasswordLoading(true);
    try {
      const message = await changePassword(passwordForm);
      setPasswordMessage(message);
      // Form'u temizle
      setPasswordForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
    } catch (err: any) {
      setPasswordMessage('Hata: ' + err.message);
    } finally {
      setPasswordLoading(false);
    }
  };

  // MaÄŸaza form handler'Ä±
  const handleStoreChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setStoreForm(prev => ({ ...prev, [name]: value }));
    setStoreMessage(''); // MesajÄ± temizle
  };

  // MaÄŸaza gÃ¼ncelleme submit
  const handleStoreSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setStoreMessage('');

    // Frontend validasyonu
    if (!storeForm.kurum_adi.trim()) {
      setStoreMessage('Kurum adÄ± zorunludur');
      return;
    }

    setStoreLoading(true);
    try {
      await updateStoreProfile(storeForm);
      setStoreMessage('MaÄŸaza bilgileri baÅŸarÄ±yla gÃ¼ncellendi!');
      // Profil bilgilerini yenile
      await fetchUserProfile();
    } catch (err: any) {
      setStoreMessage('Hata: ' + err.message);
    } finally {
      setStoreLoading(false);
    }
  };

  // KullanÄ±cÄ± form handler'Ä±
  const handleUserChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setUserForm(prev => ({ ...prev, [name]: value }));
    setUserMessage(''); // MesajÄ± temizle
  };

  // KullanÄ±cÄ± profil gÃ¼ncelleme submit
  const handleUserSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setUserMessage('');

    // Frontend validasyonu
    if (!userForm.name.trim() || !userForm.surname.trim()) {
      setUserMessage('Ad ve soyad zorunludur');
      return;
    }

    setUserLoading(true);
    try {
      await updateUserProfile(userForm);
      setUserMessage('Profil bilgileri baÅŸarÄ±yla gÃ¼ncellendi!');
      // Profil bilgilerini yenile
      await fetchUserProfile();
    } catch (err: any) {
      setUserMessage('Hata: ' + err.message);
    } finally {
      setUserLoading(false);
    }
  };

  // Admin iÃ§in mevcut fonksiyonlar (deÄŸiÅŸiklik yok)
  useEffect(() => {
    if (selectedUser) {
      setFormData({
        username: selectedUser.username,
        name: (selectedUser.fullName || ((selectedUser.name || '') + ' ' + (selectedUser.surname || ''))).split(' ')[0],
        surname: (selectedUser.fullName || ((selectedUser.name || '') + ' ' + (selectedUser.surname || ''))).split(' ').slice(1).join(' '),
        email: selectedUser.email,
        phoneNumber: (selectedUser as any).phoneNumber || '',
        adres: '', // ArtÄ±k kullanÄ±lmÄ±yor - maÄŸaza bazlÄ± sistem
        userTypeName:
          typeof selectedUser.userType === 'object'
            ? selectedUser.userType.name
            : selectedUser.userType || '',
        storeId: selectedUser.Store?.store_id || ''
      });
    } else {
      setFormData({
        username: '',
        password: '',
        name: '',
        surname: '',
        email: '',
        phoneNumber: '',
        adres: '',
        userTypeName: 'viewer',
        storeId: ''
      });
    }
  }, [selectedUser]);

  const fetchUsers = async () => {
    // Zaten yÃ¼kleme yapÄ±lÄ±yorsa Ã§Ä±k
    if (loading && users.length > 0) return;
    
    setLoading(true);
    try {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL || 'https://pashahomeapps.up.railway.app'}/api/admin/users`, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      const data = await res.json();
      if (!data.success) throw new Error(data.message);
      setUsers(data.data || []);
    } catch (err: any) {
      setError(err.message || "KullanÄ±cÄ±lar yÃ¼klenirken bir hata oluÅŸtu");
    } finally {
      setLoading(false);
    }
  };

  const fetchStores = async () => {
    try {
      const storesData = await getStores();
      setStores(storesData.map(store => ({
        store_id: store.store_id,
        kurum_adi: store.kurum_adi
      })));
    } catch (err: any) {
      setError(err.message || "MaÄŸazalar yÃ¼klenirken bir hata oluÅŸtu");
    }
  };

  const handleUserClick = async (userId: string) => {
    try {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL || 'https://pashahomeapps.up.railway.app'}/api/admin/users/${userId}`, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      const data = await res.json();
      if (!data.success) throw new Error(data.message);
      setSelectedUser(data.data);
      setModalOpen(true);
    } catch (err: any) {
      setError(err.message || "KullanÄ±cÄ± bilgileri alÄ±nÄ±rken bir hata oluÅŸtu");
    }
  };

  const handleDeleteUser = async () => {
    if (!deleteUserId) return;
    
    try {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL || 'https://pashahomeapps.up.railway.app'}/api/admin/users/${deleteUserId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      const data = await res.json();
      if (!data.success) throw new Error(data.message);
      
      setUsers(users.filter(u => u.userId !== deleteUserId));
      setDeleteModalOpen(false);
      setDeleteUserId(null);
    } catch (err: any) {
      setError(err.message || "KullanÄ±cÄ± silinirken bir hata oluÅŸtu");
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const url = selectedUser 
        ? `${process.env.NEXT_PUBLIC_API_BASE_URL || 'https://pashahomeapps.up.railway.app'}/api/admin/users/${selectedUser.userId}`
        : `${process.env.NEXT_PUBLIC_API_BASE_URL || 'https://pashahomeapps.up.railway.app'}/api/admin/users`;
      
      const method = selectedUser ? 'PUT' : 'POST';
      
      // BoÅŸ adres alanÄ±nÄ± request'ten kaldÄ±r
      const requestData = { ...formData };
      if (!requestData.adres || requestData.adres.trim() === '') {
        delete requestData.adres;
      }
      
      const res = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(requestData)
      });
      
      const data = await res.json();
      if (!data.success) throw new Error(data.message);
      
      setModalOpen(false);
      setSelectedUser(null);
      
      // KullanÄ±cÄ±larÄ± yenile
      fetchedRef.current = false; // useRef'i sÄ±fÄ±rla
      fetchUsers();
    } catch (err: any) {
      setError(err.message || "Ä°ÅŸlem sÄ±rasÄ±nda bir hata oluÅŸtu");
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleAssignStore = async () => {
    if (!assigningUserId) return;
    
    // MaÄŸaza atamasÄ±nÄ± kaldÄ±rma seÃ§eneÄŸi
    if (selectedStoreId === "remove") {
      await handleRemoveStore();
      return;
    }
    
    if (!selectedStoreId) return;
    
    setAssignLoading(true);
    try {
      const result = await assignUserToStore(assigningUserId, {
        storeId: selectedStoreId
      });
      
      // KullanÄ±cÄ± listesini gÃ¼ncelle
      setUsers(users.map(u => 
        u.userId === assigningUserId 
          ? {...u, Store: result.data.Store} 
          : u
      ));
      
      setAssignStoreModalOpen(false);
      setAssigningUserId(null);
      setSelectedStoreId('');
    } catch (err: any) {
      setError(err.message || "KullanÄ±cÄ± maÄŸazaya atanÄ±rken bir hata oluÅŸtu");
    } finally {
      setAssignLoading(false);
    }
  };
  
  const handleRemoveStore = async () => {
    if (!assigningUserId) return;
    
    setRemoveLoading(true);
    try {
      const result = await removeUserFromStore(assigningUserId);
      
      // KullanÄ±cÄ± listesini gÃ¼ncelle
      setUsers(users.map(u => {
        if (u.userId === assigningUserId) {
          // Store Ã¶zelliÄŸini undefined olarak ayarla (null deÄŸil)
          const updatedUser = {...u};
          updatedUser.Store = undefined;
          return updatedUser;
        }
        return u;
      }));
      
      setAssignStoreModalOpen(false);
      setAssigningUserId(null);
      setSelectedStoreId('');
    } catch (err: any) {
      setError(err.message || "KullanÄ±cÄ±nÄ±n maÄŸaza atamasÄ± kaldÄ±rÄ±lÄ±rken bir hata oluÅŸtu");
    } finally {
      setRemoveLoading(false);
    }
  };

  // Normal kullanÄ±cÄ± iÃ§in profil yÃ¶netimi UI'Ä±
  if (!isAdminOrEditor) {
    return (
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="mb-6">
          <h1 className="text-2xl font-bold text-gray-900">Profil AyarlarÄ±</h1>
          <p className="text-gray-600">KiÅŸisel bilgilerinizi ve ayarlarÄ±nÄ±zÄ± yÃ¶netin</p>
        </div>

        {/* Tab Navigation */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => setActiveTab('profile')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'profile'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <FaUser className="inline mr-2" />
              Profil Bilgileri
            </button>
            {storeProfile && (
              <button
                onClick={() => setActiveTab('store')}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'store'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <FaBuilding className="inline mr-2" />
                MaÄŸaza Bilgileri
              </button>
            )}
            <button
              onClick={() => {
                setActiveTab('address');
                if (addresses.length === 0) {
                  fetchAddresses();
                }
              }}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'address'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <FaMapMarkerAlt className="inline mr-2" />
              Adres YÃ¶netimi
            </button>
            <button
              onClick={() => setActiveTab('password')}
              className={`py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'password'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <FaLock className="inline mr-2" />
              Åžifre DeÄŸiÅŸtir
            </button>
          </nav>
        </div>

        {profileLoading ? (
          <div className="flex items-center justify-center py-12">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        ) : (
          <>
            {/* Profil Bilgileri Tab */}
            {activeTab === 'profile' && userProfile && (
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-4">KiÅŸisel Bilgiler</h2>
                
                {userMessage && (
                  <div className={`mb-4 p-3 rounded-md ${
                    userMessage.startsWith('Hata') 
                      ? 'bg-red-50 border border-red-200 text-red-700' 
                      : 'bg-green-50 border border-green-200 text-green-700'
                  }`}>
                    {userMessage}
                  </div>
                )}

                <form onSubmit={handleUserSubmit} className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Ad <span className="text-red-500">*</span>
                      </label>
                      <input
                        type="text"
                        name="name"
                        value={userForm.name}
                        onChange={handleUserChange}
                        required
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Soyad <span className="text-red-500">*</span>
                      </label>
                      <input
                        type="text"
                        name="surname"
                        value={userForm.surname}
                        onChange={handleUserChange}
                        required
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Telefon
                      </label>
                      <input
                        type="tel"
                        name="phoneNumber"
                        value={userForm.phoneNumber}
                        onChange={handleUserChange}
                        placeholder="05xx xxx xx xx"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">KullanÄ±cÄ± AdÄ±</label>
                      <p className="bg-gray-50 px-3 py-2 rounded-md text-gray-900">{userProfile.username}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">E-posta</label>
                      <p className="bg-gray-50 px-3 py-2 rounded-md text-gray-900">{userProfile.email}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">KullanÄ±cÄ± Tipi</label>
                      <p className="bg-gray-50 px-3 py-2 rounded-md text-gray-900">{userProfile.userType}</p>
                    </div>
                  </div>
                  
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Adres
                    </label>
                    <div className="w-full px-3 py-2 border border-gray-200 rounded-md bg-gray-50 text-gray-500 text-sm">
                      Adres bilgileri artÄ±k maÄŸaza bazlÄ± yÃ¶netilmektedir. MaÄŸaza adres yÃ¶netimi iÃ§in lÃ¼tfen admin ile iletiÅŸime geÃ§iniz.
                    </div>
                  </div>
                  
                  <div className="flex justify-end">
                    <button
                      type="submit"
                      disabled={userLoading}
                      className="px-6 py-2 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {userLoading ? 'GÃ¼ncelleniyor...' : 'GÃ¼ncelle'}
                    </button>
                  </div>
                </form>
              </div>
            )}

            {/* MaÄŸaza Bilgileri Tab */}
            {activeTab === 'store' && storeProfile && (
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <h2 className="text-lg font-semibold text-gray-900 mb-4">MaÄŸaza Bilgileri</h2>
                
                {storeMessage && (
                  <div className={`mb-4 p-3 rounded-md ${
                    storeMessage.startsWith('Hata') 
                      ? 'bg-red-50 border border-red-200 text-red-700' 
                      : 'bg-green-50 border border-green-200 text-green-700'
                  }`}>
                    {storeMessage}
                  </div>
                )}

                <form onSubmit={handleStoreSubmit} className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Kurum AdÄ± *
                      </label>
                      <input
                        type="text"
                        name="kurum_adi"
                        value={storeForm.kurum_adi}
                        onChange={handleStoreChange}
                        required
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Vergi NumarasÄ±
                      </label>
                      <input
                        type="text"
                        name="vergi_numarasi"
                        value={storeForm.vergi_numarasi}
                        onChange={handleStoreChange}
                        placeholder="10-11 haneli sayÄ±sal deÄŸer"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Vergi Dairesi
                      </label>
                      <input
                        type="text"
                        name="vergi_dairesi"
                        value={storeForm.vergi_dairesi}
                        onChange={handleStoreChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Yetkili AdÄ±
                      </label>
                      <input
                        type="text"
                        name="yetkili_adi"
                        value={storeForm.yetkili_adi}
                        onChange={handleStoreChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Yetkili SoyadÄ±
                      </label>
                      <input
                        type="text"
                        name="yetkili_soyadi"
                        value={storeForm.yetkili_soyadi}
                        onChange={handleStoreChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        TCKN
                      </label>
                      <input
                        type="text"
                        name="tckn"
                        value={storeForm.tckn}
                        onChange={handleStoreChange}
                        maxLength={11}
                        placeholder="12345678901"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Telefon
                      </label>
                      <input
                        type=